#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö AI Finance
"""

import os
import sys
import subprocess
import datetime
import json
from pathlib import Path
import psycopg2
from psycopg2.extras import RealDictCursor

def get_database_connection():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    database_url = os.getenv('DATABASE_URL', 'postgresql://postgres:password@postgres:5432/ai_finance')
    return psycopg2.connect(database_url)

def backup_database():
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_dir = Path('/app/backups')
    backup_dir.mkdir(exist_ok=True)
    
    backup_file = backup_dir / f'ai_finance_backup_{timestamp}.sql'
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ DATABASE_URL
    database_url = os.getenv('DATABASE_URL', 'postgresql://postgres:password@postgres:5432/ai_finance')
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å –ø–æ–º–æ—â—å—é pg_dump
    cmd = [
        'pg_dump',
        database_url,
        '--verbose',
        '--clean',
        '--no-owner',
        '--no-privileges',
        '--format=plain',
        f'--file={backup_file}'
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞: {backup_file}")
        return backup_file
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        print(f"stderr: {e.stderr}")
        return None

def backup_data_files():
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_dir = Path('/app/backups')
    backup_dir.mkdir(exist_ok=True)
    
    data_dir = Path('/app/data')
    if not data_dir.exists():
        print("‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None
    
    backup_file = backup_dir / f'data_backup_{timestamp}.tar.gz'
    
    cmd = [
        'tar',
        '-czf',
        str(backup_file),
        '-C',
        str(data_dir.parent),
        'data'
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–∞: {backup_file}")
        return backup_file
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")
        return None

def export_transactions_json():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ JSON"""
    timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_dir = Path('/app/backups')
    backup_dir.mkdir(exist_ok=True)
    
    json_file = backup_dir / f'transactions_{timestamp}.json'
    
    try:
        conn = get_database_connection()
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        cursor.execute("""
            SELECT t.*, c.name as category_name, u.username
            FROM transactions t
            LEFT JOIN categories c ON t.category_id = c.id
            LEFT JOIN users u ON t.user_id = u.id
            ORDER BY t.date DESC
        """)
        
        transactions = cursor.fetchall()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        json_data = []
        for transaction in transactions:
            json_data.append(dict(transaction))
        
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(json_data, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ JSON: {json_file}")
        return json_file
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
        return None
    finally:
        if 'conn' in locals():
            conn.close()

def cleanup_old_backups():
    """–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)"""
    backup_dir = Path('/app/backups')
    if not backup_dir.exists():
        return
    
    cutoff_date = datetime.datetime.now() - datetime.timedelta(days=30)
    
    for backup_file in backup_dir.glob('*'):
        if backup_file.is_file():
            file_time = datetime.datetime.fromtimestamp(backup_file.stat().st_mtime)
            if file_time < cutoff_date:
                backup_file.unlink()
                print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {backup_file}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ AI Finance...")
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.datetime.now()}")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
    db_backup = backup_database()
    data_backup = backup_data_files()
    json_export = export_transactions_json()
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
    cleanup_old_backups()
    
    # –°–≤–æ–¥–∫–∞
    print("\nüìä –°–≤–æ–¥–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:")
    if db_backup:
        print(f"  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_backup}")
    if data_backup:
        print(f"  ‚úÖ –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö: {data_backup}")
    if json_export:
        print(f"  ‚úÖ JSON —ç–∫—Å–ø–æ—Ä—Ç: {json_export}")
    
    print("üéâ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
