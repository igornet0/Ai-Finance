"""
–î–∞—à–±–æ—Ä–¥ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
"""

import tkinter as tk
from tkinter import ttk
from datetime import datetime, date, timedelta
from decimal import Decimal
from typing import Dict, Any

from ..core.calculators import BalanceCalculator, StatisticsCalculator


class DashboardWidget:
    """
    –í–∏–¥–∂–µ—Ç –¥–∞—à–±–æ—Ä–¥–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
    """
    
    def __init__(self, parent, main_window):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            main_window: –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.parent = parent
        self.main_window = main_window
        self.services = main_window.get_services()
        
        # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã
        self.balance_calculator = BalanceCalculator()
        self.statistics_calculator = StatisticsCalculator()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._create_widgets()
    
    def _create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –¥–∞—à–±–æ—Ä–¥–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        canvas = tk.Canvas(self.parent)
        scrollbar = ttk.Scrollbar(self.parent, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(scrollable_frame, text="üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∞—à–±–æ—Ä–¥", 
                               font=("Arial", 16, "bold"))
        title_label.pack(pady=10)
        
        # –§—Ä–µ–π–º –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        self.cards_frame = ttk.Frame(scrollable_frame)
        self.cards_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        self._create_balance_cards()
        
        # –§—Ä–µ–π–º –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –æ—Ç—á–µ—Ç–æ–≤
        self.charts_frame = ttk.Frame(scrollable_frame)
        self.charts_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ –æ—Ç—á–µ—Ç–æ–≤
        self._create_report_tabs()
    
    def _create_balance_cards(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏"""
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        self.balance_card = self._create_card(
            self.cards_frame, "üí≥ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å", "0.00 ‚ÇΩ", "#3498db"
        )
        self.balance_card.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü
        self.income_card = self._create_card(
            self.cards_frame, "üí∞ –î–æ—Ö–æ–¥—ã (–º–µ—Å—è—Ü)", "0.00 ‚ÇΩ", "#2ecc71"
        )
        self.income_card.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü
        self.expense_card = self._create_card(
            self.cards_frame, "üí∏ –†–∞—Å—Ö–æ–¥—ã (–º–µ—Å—è—Ü)", "0.00 ‚ÇΩ", "#e74c3c"
        )
        self.expense_card.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —á–∏—Å—Ç–æ–≥–æ –¥–æ—Ö–æ–¥–∞
        self.net_income_card = self._create_card(
            self.cards_frame, "üìà –ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥", "0.00 ‚ÇΩ", "#f39c12"
        )
        self.net_income_card.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)
    
    def _create_card(self, parent, title: str, value: str, color: str) -> ttk.Frame:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
            value: –ó–Ω–∞—á–µ–Ω–∏–µ
            color: –¶–≤–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
        
        Returns:
            –§—Ä–µ–π–º –∫–∞—Ä—Ç–æ—á–∫–∏
        """
        card = ttk.Frame(parent, relief="solid", borderwidth=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(card, text=title, font=("Arial", 10, "bold"))
        title_label.pack(pady=(10, 5))
        
        # –ó–Ω–∞—á–µ–Ω–∏–µ
        value_label = ttk.Label(card, text=value, font=("Arial", 14, "bold"))
        value_label.pack(pady=(0, 10))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ label –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        card.value_label = value_label
        
        return card
    
    def _create_report_tabs(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""
        # Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.report_notebook = ttk.Notebook(self.charts_frame)
        self.report_notebook.pack(fill=tk.BOTH, expand=True)
        
        # –í–∫–ª–∞–¥–∫–∞ "–û–±–∑–æ—Ä"
        self.overview_frame = ttk.Frame(self.report_notebook)
        self.report_notebook.add(self.overview_frame, text="üìä –û–±–∑–æ—Ä")
        self._create_overview_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
        self.categories_frame = ttk.Frame(self.report_notebook)
        self.report_notebook.add(self.categories_frame, text="üìÅ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        self._create_categories_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–¢—Ä–µ–Ω–¥—ã"
        self.trends_frame = ttk.Frame(self.report_notebook)
        self.report_notebook.add(self.trends_frame, text="üìà –¢—Ä–µ–Ω–¥—ã")
        self._create_trends_tab()
    
    def _create_overview_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ–±–∑–æ—Ä–∞"""
        # –¢–∞–±–ª–∏—Ü–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
        columns = ("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ")
        self.overview_tree = ttk.Treeview(self.overview_frame, columns=columns, show="headings", height=8)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in columns:
            self.overview_tree.heading(col, text=col)
            self.overview_tree.column(col, width=150, anchor=tk.CENTER)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä
        overview_scrollbar = ttk.Scrollbar(self.overview_frame, orient=tk.VERTICAL, command=self.overview_tree.yview)
        self.overview_tree.configure(yscrollcommand=overview_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.overview_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)
        overview_scrollbar.pack(side=tk.RIGHT, fill=tk.Y, pady=5)
    
    def _create_categories_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        # –¢–∞–±–ª–∏—Ü–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        columns = ("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–¢–∏–ø", "–°—É–º–º–∞", "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", "–°—Ä–µ–¥–Ω—è—è")
        self.categories_tree = ttk.Treeview(self.categories_frame, columns=columns, show="headings", height=10)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in columns:
            self.categories_tree.heading(col, text=col)
            self.categories_tree.column(col, width=120, anchor=tk.CENTER)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä
        categories_scrollbar = ttk.Scrollbar(self.categories_frame, orient=tk.VERTICAL, command=self.categories_tree.yview)
        self.categories_tree.configure(yscrollcommand=categories_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.categories_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)
        categories_scrollbar.pack(side=tk.RIGHT, fill=tk.Y, pady=5)
    
    def _create_trends_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        trends_label = ttk.Label(self.trends_frame, text="üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤", 
                                font=("Arial", 12, "bold"))
        trends_label.pack(pady=10)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å —Ç—Ä–µ–Ω–¥–∞–º–∏
        columns = ("–ú–µ—Å—è—Ü", "–î–æ—Ö–æ–¥—ã", "–†–∞—Å—Ö–æ–¥—ã", "–ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥", "–¢—Ä–µ–Ω–¥")
        self.trends_tree = ttk.Treeview(self.trends_frame, columns=columns, show="headings", height=12)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in columns:
            self.trends_tree.heading(col, text=col)
            self.trends_tree.column(col, width=120, anchor=tk.CENTER)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä
        trends_scrollbar = ttk.Scrollbar(self.trends_frame, orient=tk.VERTICAL, command=self.trends_tree.yview)
        self.trends_tree.configure(yscrollcommand=trends_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.trends_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)
        trends_scrollbar.pack(side=tk.RIGHT, fill=tk.Y, pady=5)
    
    def refresh(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transactions = self.services['transaction_service'].get_transactions()
            self.balance_calculator.add_transactions(transactions)
            self.statistics_calculator.add_transactions(transactions)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
            self._update_balance_cards()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç—ã
            self._update_overview_tab()
            self._update_categories_tab()
            self._update_trends_tab()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
    
    def _update_balance_cards(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –±–∞–ª–∞–Ω—Å–æ–º"""
        try:
            # –û–±—â–∏–π –±–∞–ª–∞–Ω—Å
            total_balance = self.balance_calculator.calculate_balance()
            self.balance_card.value_label.config(text=f"{total_balance:,.2f} ‚ÇΩ")
            
            # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            today = date.today()
            month_start = today.replace(day=1)
            
            month_income = self.balance_calculator.calculate_income(month_start, today)
            month_expenses = self.balance_calculator.calculate_expenses(month_start, today)
            month_net = self.balance_calculator.calculate_net_income(month_start, today)
            
            self.income_card.value_label.config(text=f"{month_income:,.2f} ‚ÇΩ")
            self.expense_card.value_label.config(text=f"{month_expenses:,.2f} ‚ÇΩ")
            self.net_income_card.value_label.config(text=f"{month_net:,.2f} ‚ÇΩ")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")
    
    def _update_overview_tab(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ–±–∑–æ—Ä–∞"""
        try:
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            for item in self.overview_tree.get_children():
                self.overview_tree.delete(item)
            
            today = date.today()
            current_month_start = today.replace(day=1)
            
            # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
            if today.month == 1:
                prev_month_start = date(today.year - 1, 12, 1)
                prev_month_end = date(today.year - 1, 12, 31)
            else:
                prev_month_start = date(today.year, today.month - 1, 1)
                prev_month_end = date(today.year, today.month, 1) - timedelta(days=1)
            
            # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            current_income = self.balance_calculator.calculate_income(current_month_start, today)
            current_expenses = self.balance_calculator.calculate_expenses(current_month_start, today)
            current_net = current_income - current_expenses
            
            # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
            prev_income = self.balance_calculator.calculate_income(prev_month_start, prev_month_end)
            prev_expenses = self.balance_calculator.calculate_expenses(prev_month_start, prev_month_end)
            prev_net = prev_income - prev_expenses
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
            data = [
                ("–î–æ—Ö–æ–¥—ã", f"{current_income:,.2f} ‚ÇΩ", f"{prev_income:,.2f} ‚ÇΩ", 
                 self._format_change(current_income, prev_income)),
                ("–†–∞—Å—Ö–æ–¥—ã", f"{current_expenses:,.2f} ‚ÇΩ", f"{prev_expenses:,.2f} ‚ÇΩ", 
                 self._format_change(current_expenses, prev_expenses)),
                ("–ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥", f"{current_net:,.2f} ‚ÇΩ", f"{prev_net:,.2f} ‚ÇΩ", 
                 self._format_change(current_net, prev_net))
            ]
            
            for row in data:
                self.overview_tree.insert("", tk.END, values=row)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±–∑–æ—Ä–∞: {e}")
    
    def _update_categories_tab(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        try:
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            for item in self.categories_tree.get_children():
                self.categories_tree.delete(item)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            today = date.today()
            month_start = today.replace(day=1)
            category_analysis = self.statistics_calculator.get_category_analysis(month_start, today)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
            for category_data in category_analysis['categories']:
                category_id = category_data['category_id']
                category = self.services['category_service'].get_category(category_id)
                
                category_name = category.name if category else f"ID: {category_id}"
                category_type = "üí∞" if category_data['income'] > 0 else "üí∏"
                total_amount = category_data['income'] + category_data['expense']
                transaction_count = category_data['transaction_count']
                average = total_amount / transaction_count if transaction_count > 0 else 0
                
                self.categories_tree.insert("", tk.END, values=(
                    category_name,
                    category_type,
                    f"{total_amount:,.2f} ‚ÇΩ",
                    transaction_count,
                    f"{average:,.2f} ‚ÇΩ"
                ))
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
    
    def _update_trends_tab(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤"""
        try:
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            for item in self.trends_tree.get_children():
                self.trends_tree.delete(item)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
            trends_analysis = self.statistics_calculator.get_trend_analysis(12)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
            for month_data in trends_analysis['monthly_data']:
                month_name = f"{month_data['year']}-{month_data['month']:02d}"
                income = month_data['income']
                expenses = month_data['expenses']
                net_income = month_data['net_income']
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
                trend_icon = "üìà" if net_income > 0 else "üìâ" if net_income < 0 else "‚û°Ô∏è"
                
                self.trends_tree.insert("", tk.END, values=(
                    month_name,
                    f"{income:,.2f} ‚ÇΩ",
                    f"{expenses:,.2f} ‚ÇΩ",
                    f"{net_income:,.2f} ‚ÇΩ",
                    trend_icon
                ))
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
    
    def _format_change(self, current: Decimal, previous: Decimal) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
        
        Args:
            current: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            previous: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        """
        if previous == 0:
            return "N/A"
        
        change = ((current - previous) / previous) * 100
        if change > 0:
            return f"+{change:.1f}% üìà"
        elif change < 0:
            return f"{change:.1f}% üìâ"
        else:
            return "0% ‚û°Ô∏è"
    
    def show_report(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç (–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –æ–±–∑–æ—Ä–∞)"""
        self.report_notebook.select(0)
    
    def show_analysis(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ (–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π)"""
        self.report_notebook.select(1)
