"""
–í–∏–¥–∂–µ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""

import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime, date
from typing import List, Optional, Dict, Any

from ..core.models.transaction import Transaction, TransactionType
from ..core.models.category import Category, CategoryType
from ..core.models.budget import Budget, BudgetPeriod


class TransactionTable:
    """
    –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    """
    
    def __init__(self, parent, main_window):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            main_window: –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.parent = parent
        self.main_window = main_window
        self.services = main_window.get_services()
        
        self._create_widgets()
        self.refresh()
    
    def _create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ —Ç–∞–±–ª–∏—Ü—ã"""
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(self.parent)
        control_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        ttk.Button(control_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", command=self._add_transaction).pack(side=tk.LEFT, padx=2)
        ttk.Button(control_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self._edit_transaction).pack(side=tk.LEFT, padx=2)
        ttk.Button(control_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", command=self._delete_transaction).pack(side=tk.LEFT, padx=2)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ttk.Separator(control_frame, orient=tk.VERTICAL).pack(side=tk.LEFT, fill=tk.Y, padx=10)
        
        # –§–∏–ª—å—Ç—Ä—ã
        ttk.Label(control_frame, text="–§–∏–ª—å—Ç—Ä:").pack(side=tk.LEFT, padx=2)
        
        self.filter_var = tk.StringVar()
        self.filter_var.trace('w', self._on_filter_change)
        filter_entry = ttk.Entry(control_frame, textvariable=self.filter_var, width=20)
        filter_entry.pack(side=tk.LEFT, padx=2)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        ttk.Button(control_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self.refresh).pack(side=tk.RIGHT, padx=2)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        columns = ("ID", "–î–∞—Ç–∞", "–¢–∏–ø", "–°—É–º–º–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–û–ø–∏—Å–∞–Ω–∏–µ")
        self.tree = ttk.Treeview(self.parent, columns=columns, show="headings", height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.tree.heading("ID", text="ID")
        self.tree.heading("–î–∞—Ç–∞", text="–î–∞—Ç–∞")
        self.tree.heading("–¢–∏–ø", text="–¢–∏–ø")
        self.tree.heading("–°—É–º–º–∞", text="–°—É–º–º–∞")
        self.tree.heading("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        self.tree.heading("–û–ø–∏—Å–∞–Ω–∏–µ", text="–û–ø–∏—Å–∞–Ω–∏–µ")
        
        self.tree.column("ID", width=50, anchor=tk.CENTER)
        self.tree.column("–î–∞—Ç–∞", width=100, anchor=tk.CENTER)
        self.tree.column("–¢–∏–ø", width=80, anchor=tk.CENTER)
        self.tree.column("–°—É–º–º–∞", width=120, anchor=tk.E)
        self.tree.column("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", width=120, anchor=tk.W)
        self.tree.column("–û–ø–∏—Å–∞–Ω–∏–µ", width=200, anchor=tk.W)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        v_scrollbar = ttk.Scrollbar(self.parent, orient=tk.VERTICAL, command=self.tree.yview)
        h_scrollbar = ttk.Scrollbar(self.parent, orient=tk.HORIZONTAL, command=self.tree.xview)
        self.tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y, pady=5)
        h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X, padx=5)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.tree.bind("<Double-1>", self._on_double_click)
        self.tree.bind("<Button-3>", self._on_right_click)
    
    def refresh(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            for item in self.tree.get_children():
                self.tree.delete(item)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transactions = self.services['transaction_service'].get_transactions(limit=100)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
            for transaction in transactions:
                # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category_name = "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                if transaction.category_id:
                    category = self.services['category_service'].get_category(transaction.category_id)
                    if category:
                        category_name = category.name
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                type_icon = "üí∞" if transaction.is_income else "üí∏"
                amount_str = f"{transaction.amount:,.2f} ‚ÇΩ"
                if transaction.is_expense:
                    amount_str = f"-{amount_str}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
                self.tree.insert("", tk.END, values=(
                    transaction.id,
                    transaction.date.strftime('%d.%m.%Y'),
                    type_icon,
                    amount_str,
                    category_name,
                    transaction.description
                ))
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
    
    def _on_filter_change(self, *args):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
        filter_text = self.filter_var.get().lower()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∞–±–ª–∏—Ü—ã
        for item in self.tree.get_children():
            values = self.tree.item(item)['values']
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            if (filter_text in values[4].lower() or 
                filter_text in values[5].lower()):
                self.tree.reattach(item, '', 'end')
            else:
                self.tree.detach(item)
    
    def _on_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞"""
        self._edit_transaction()
    
    def _on_right_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞"""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        context_menu = tk.Menu(self.parent, tearoff=0)
        context_menu.add_command(label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self._edit_transaction)
        context_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å", command=self._delete_transaction)
        context_menu.add_separator()
        context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self._copy_transaction)
        
        try:
            context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            context_menu.grab_release()
    
    def _add_transaction(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        from .dialogs import TransactionDialog
        dialog = TransactionDialog(self.parent, self.main_window)
        if dialog.result:
            self.refresh()
    
    def _edit_transaction(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        item = self.tree.item(selected[0])
        transaction_id = int(item['values'][0])
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ –±–∞–∑—ã
        transaction = self.services['transaction_service'].get_transaction(transaction_id)
        if not transaction:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        from .dialogs import TransactionDialog
        dialog = TransactionDialog(self.parent, self.main_window, transaction)
        if dialog.result:
            self.refresh()
    
    def _delete_transaction(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?"):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        item = self.tree.item(selected[0])
        transaction_id = int(item['values'][0])
        
        try:
            # –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            success = self.services['transaction_service'].delete_transaction(transaction_id)
            if success:
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞")
                self.refresh()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
    
    def _copy_transaction(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        selected = self.tree.selection()
        if not selected:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        item = self.tree.item(selected[0])
        values = item['values']
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        text = f"{values[1]} | {values[2]} | {values[3]} | {values[4]} | {values[5]}"
        self.parent.clipboard_clear()
        self.parent.clipboard_append(text)


class CategoryTree:
    """
    –î–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    """
    
    def __init__(self, parent, main_window):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            main_window: –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.parent = parent
        self.main_window = main_window
        self.services = main_window.get_services()
        
        self._create_widgets()
        self.refresh()
    
    def _create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –¥–µ—Ä–µ–≤–∞"""
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(self.parent)
        control_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        ttk.Button(control_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", command=self._add_category).pack(side=tk.LEFT, padx=2)
        ttk.Button(control_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self._edit_category).pack(side=tk.LEFT, padx=2)
        ttk.Button(control_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", command=self._delete_category).pack(side=tk.LEFT, padx=2)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ttk.Separator(control_frame, orient=tk.VERTICAL).pack(side=tk.LEFT, fill=tk.Y, padx=10)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        ttk.Button(control_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self.refresh).pack(side=tk.RIGHT, padx=2)
        
        # –î–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.tree = ttk.Treeview(self.parent, columns=("type", "icon", "active"), show="tree headings", height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.tree.heading("#0", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
        self.tree.heading("type", text="–¢–∏–ø")
        self.tree.heading("icon", text="–ò–∫–æ–Ω–∫–∞")
        self.tree.heading("active", text="–ê–∫—Ç–∏–≤–Ω–∞")
        
        self.tree.column("#0", width=200, anchor=tk.W)
        self.tree.column("type", width=80, anchor=tk.CENTER)
        self.tree.column("icon", width=60, anchor=tk.CENTER)
        self.tree.column("active", width=80, anchor=tk.CENTER)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar = ttk.Scrollbar(self.parent, orient=tk.VERTICAL, command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y, pady=5)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.tree.bind("<Double-1>", self._on_double_click)
        self.tree.bind("<Button-3>", self._on_right_click)
    
    def refresh(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤–∞"""
        try:
            # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ
            for item in self.tree.get_children():
                self.tree.delete(item)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            category_tree = self.services['category_service'].get_category_tree()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –¥–µ—Ä–µ–≤–æ
            self._add_categories_to_tree(category_tree, "")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
    
    def _add_categories_to_tree(self, categories: List[Dict], parent: str):
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –¥–µ—Ä–µ–≤–æ
        
        Args:
            categories: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            parent: ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        """
        for category_data in categories:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø
            type_icon = "üí∞" if category_data['category_type'] == 'income' else "üí∏"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            item_id = self.tree.insert(parent, tk.END, 
                                     text=category_data['name'],
                                     values=(type_icon, category_data['icon'], 
                                            "‚úÖ" if category_data['is_active'] else "‚ùå"))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ç–µ–≥–µ
            self.tree.set(item_id, "category_id", category_data['id'])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category_data['children']:
                self._add_categories_to_tree(category_data['children'], item_id)
    
    def _on_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞"""
        self._edit_category()
    
    def _on_right_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞"""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        context_menu = tk.Menu(self.parent, tearoff=0)
        context_menu.add_command(label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self._edit_category)
        context_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å", command=self._delete_category)
        context_menu.add_separator()
        context_menu.add_command(label="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", command=self._add_subcategory)
        
        try:
            context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            context_menu.grab_release()
    
    def _add_category(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        from .dialogs import CategoryDialog
        dialog = CategoryDialog(self.parent, self.main_window)
        if dialog.result:
            self.refresh()
    
    def _add_subcategory(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        item = self.tree.item(selected[0])
        parent_id = int(self.tree.set(selected[0], "category_id"))
        
        from .dialogs import CategoryDialog
        dialog = CategoryDialog(self.parent, self.main_window, parent_id=parent_id)
        if dialog.result:
            self.refresh()
    
    def _edit_category(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_id = int(self.tree.set(selected[0], "category_id"))
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –±–∞–∑—ã
        category = self.services['category_service'].get_category(category_id)
        if not category:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        from .dialogs import CategoryDialog
        dialog = CategoryDialog(self.parent, self.main_window, category)
        if dialog.result:
            self.refresh()
    
    def _delete_category(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?"):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_id = int(self.tree.set(selected[0], "category_id"))
        
        try:
            # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            success = self.services['category_service'].delete_category(category_id)
            if success:
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞")
                self.refresh()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")


class BudgetList:
    """
    –°–ø–∏—Å–æ–∫ –±—é–¥–∂–µ—Ç–æ–≤
    """
    
    def __init__(self, parent, main_window):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –±—é–¥–∂–µ—Ç–æ–≤
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            main_window: –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.parent = parent
        self.main_window = main_window
        self.services = main_window.get_services()
        
        self._create_widgets()
        self.refresh()
    
    def _create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ —Å–ø–∏—Å–∫–∞"""
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(self.parent)
        control_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        ttk.Button(control_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", command=self._add_budget).pack(side=tk.LEFT, padx=2)
        ttk.Button(control_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self._edit_budget).pack(side=tk.LEFT, padx=2)
        ttk.Button(control_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", command=self._delete_budget).pack(side=tk.LEFT, padx=2)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ttk.Separator(control_frame, orient=tk.VERTICAL).pack(side=tk.LEFT, fill=tk.Y, padx=10)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        ttk.Button(control_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self.refresh).pack(side=tk.RIGHT, padx=2)
        
        # –¢–∞–±–ª–∏—Ü–∞ –±—é–¥–∂–µ—Ç–æ–≤
        columns = ("–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–õ–∏–º–∏—Ç", "–ü–æ—Ç—Ä–∞—á–µ–Ω–æ", "–û—Å—Ç–∞—Ç–æ–∫", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", "–°—Ç–∞—Ç—É—Å")
        self.tree = ttk.Treeview(self.parent, columns=columns, show="headings", height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in columns:
            self.tree.heading(col, text=col)
            self.tree.column(col, width=120, anchor=tk.CENTER)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        v_scrollbar = ttk.Scrollbar(self.parent, orient=tk.VERTICAL, command=self.tree.yview)
        h_scrollbar = ttk.Scrollbar(self.parent, orient=tk.HORIZONTAL, command=self.tree.xview)
        self.tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y, pady=5)
        h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X, padx=5)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.tree.bind("<Double-1>", self._on_double_click)
        self.tree.bind("<Button-3>", self._on_right_click)
    
    def refresh(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–∞"""
        try:
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            for item in self.tree.get_children():
                self.tree.delete(item)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –±—é–¥–∂–µ—Ç–æ–≤
            budgets_status = self.services['budget_service'].get_all_budgets_status()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±—é–¥–∂–µ—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü—É
            for budget_status in budgets_status:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if budget_status['is_over_budget']:
                    status_icon = "üî¥ –ü—Ä–µ–≤—ã—à–µ–Ω"
                elif budget_status['is_near_limit']:
                    status_icon = "üü° –ë–ª–∏–∑–∫–æ –∫ –ª–∏–º–∏—Ç—É"
                else:
                    status_icon = "üü¢ –ù–æ—Ä–º–∞"
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_name = "–û–±—â–∏–π"
                if budget_status['budget_id']:
                    budget = self.services['budget_service'].get_budget(budget_status['budget_id'])
                    if budget and budget.category_id:
                        category = self.services['category_service'].get_category(budget.category_id)
                        if category:
                            category_name = category.name
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
                self.tree.insert("", tk.END, values=(
                    budget_status['budget_name'],
                    category_name,
                    f"{budget_status['budget_amount']:,.2f} ‚ÇΩ",
                    f"{budget_status['spent_amount']:,.2f} ‚ÇΩ",
                    f"{budget_status['remaining_amount']:,.2f} ‚ÇΩ",
                    f"{budget_status['usage_percentage']:.1f}%",
                    status_icon
                ))
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±—é–¥–∂–µ—Ç—ã: {e}")
    
    def _on_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞"""
        self._edit_budget()
    
    def _on_right_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞"""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        context_menu = tk.Menu(self.parent, tearoff=0)
        context_menu.add_command(label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self._edit_budget)
        context_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å", command=self._delete_budget)
        
        try:
            context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            context_menu.grab_release()
    
    def _add_budget(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±—é–¥–∂–µ—Ç–∞"""
        from .dialogs import BudgetDialog
        dialog = BudgetDialog(self.parent, self.main_window)
        if dialog.result:
            self.refresh()
    
    def _edit_budget(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞"""
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—é–¥–∂–µ—Ç–∞
        item = self.tree.item(selected[0])
        budget_name = item['values'][0]
        
        # –ù–∞—Ö–æ–¥–∏–º –±—é–¥–∂–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        budgets = self.services['budget_service'].get_budgets()
        budget = next((b for b in budgets if b.name == budget_name), None)
        
        if not budget:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ë—é–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        from .dialogs import BudgetDialog
        dialog = BudgetDialog(self.parent, self.main_window, budget)
        if dialog.result:
            self.refresh()
    
    def _delete_budget(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞"""
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –±—é–¥–∂–µ—Ç?"):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—é–¥–∂–µ—Ç–∞
        item = self.tree.item(selected[0])
        budget_name = item['values'][0]
        
        # –ù–∞—Ö–æ–¥–∏–º –±—é–¥–∂–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        budgets = self.services['budget_service'].get_budgets()
        budget = next((b for b in budgets if b.name == budget_name), None)
        
        if not budget:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ë—é–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            # –£–¥–∞–ª—è–µ–º –±—é–¥–∂–µ—Ç
            success = self.services['budget_service'].delete_budget(budget.id)
            if success:
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ë—é–¥–∂–µ—Ç —É–¥–∞–ª–µ–Ω")
                self.refresh()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±—é–¥–∂–µ—Ç")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
