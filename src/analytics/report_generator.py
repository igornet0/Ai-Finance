"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤
"""

import pandas as pd
from datetime import datetime, date
from typing import List, Dict, Any, Optional
from decimal import Decimal
import os
from pathlib import Path

from ..core.models.transaction import Transaction, TransactionType
from ..core.models.category import Category
from ..core.calculators import StatisticsCalculator, BalanceCalculator
from .chart_generator import ChartGenerator


class ReportGenerator:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç—á–µ—Ç–æ–≤
    """
    
    def __init__(self, output_dir: str = "reports"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤
        
        Args:
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
        """
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        
        self.chart_generator = ChartGenerator(str(self.output_dir / "charts"))
    
    def generate_csv_report(self, transactions: List[Transaction],
                          start_date: date, end_date: date,
                          filename: Optional[str] = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSV –æ—Ç—á–µ—Ç –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
        
        Args:
            transactions: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
            filename: –ò–º—è —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ
        filtered_transactions = [
            t for t in transactions
            if start_date <= t.date.date() <= end_date
        ]
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è DataFrame
        data = []
        for transaction in filtered_transactions:
            data.append({
                'ID': transaction.id,
                '–î–∞—Ç–∞': transaction.date.strftime('%d.%m.%Y'),
                '–í—Ä–µ–º—è': transaction.date.strftime('%H:%M'),
                '–¢–∏–ø': transaction.transaction_type.value,
                '–°—É–º–º–∞': float(transaction.amount),
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è_ID': transaction.category_id,
                '–û–ø–∏—Å–∞–Ω–∏–µ': transaction.description,
                '–¢–µ–≥–∏': ', '.join(transaction.tags) if transaction.tags else '',
                '–°–æ–∑–¥–∞–Ω–æ': transaction.created_at.strftime('%d.%m.%Y %H:%M'),
                '–û–±–Ω–æ–≤–ª–µ–Ω–æ': transaction.updated_at.strftime('%d.%m.%Y %H:%M')
            })
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(data)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        df = df.sort_values('–î–∞—Ç–∞', ascending=False)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        if not filename:
            filename = f"transactions_report_{start_date.strftime('%Y%m%d')}_{end_date.strftime('%Y%m%d')}.csv"
        
        filepath = self.output_dir / filename
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
        df.to_csv(filepath, index=False, encoding='utf-8-sig')
        
        return str(filepath)
    
    def generate_summary_report(self, transactions: List[Transaction],
                              start_date: date, end_date: date,
                              filename: Optional[str] = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        
        Args:
            transactions: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
            filename: –ò–º—è —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        statistics_calculator = StatisticsCalculator()
        statistics_calculator.add_transactions(transactions)
        summary = statistics_calculator._get_period_summary(start_date, end_date)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
        balance_calculator = BalanceCalculator()
        balance_calculator.add_transactions(transactions)
        current_balance = balance_calculator.calculate_balance()
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_analysis = statistics_calculator.get_category_analysis(start_date, end_date)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report_content = f"""
–§–ò–ù–ê–ù–°–û–í–´–ô –û–¢–ß–ï–¢
================

–ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}

–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
----------------
üí∞ –û–±—â–∏–µ –¥–æ—Ö–æ–¥—ã: {summary['total_income']:,.2f} ‚ÇΩ
üí∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {summary['total_expenses']:,.2f} ‚ÇΩ
üìà –ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥: {summary['net_income']:,.2f} ‚ÇΩ
üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance:,.2f} ‚ÇΩ
üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {summary['transaction_count']}
üìà –°—Ä–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {summary['average_transaction']:,.2f} ‚ÇΩ

–ê–ù–ê–õ–ò–ó –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú
--------------------
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤
        if category_analysis['top_expense_categories']:
            report_content += "\n–¢–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤:\n"
            for i, category in enumerate(category_analysis['top_expense_categories'][:5], 1):
                report_content += f"{i}. {category['category_id']}: {category['expense']:,.2f} ‚ÇΩ\n"
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        if len(transactions) > 0:
            trend_data = statistics_calculator.get_trend_analysis(6)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
            if trend_data['trends']:
                trends = trend_data['trends']
                report_content += f"""
–ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤)
------------------------------------
üìà –î–æ—Ö–æ–¥—ã: {trends['income']['direction']} ({trends['income']['percentage']:+.1f}%)
üí∏ –†–∞—Å—Ö–æ–¥—ã: {trends['expenses']['direction']} ({trends['expenses']['percentage']:+.1f}%)
üìä –ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥: {trends['net_income']['direction']} ({trends['net_income']['percentage']:+.1f}%)

–°–†–ï–î–ù–ò–ï –ó–ù–ê–ß–ï–ù–ò–Ø –ó–ê –ú–ï–°–Ø–¶
-------------------------
üí∞ –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥: {trend_data['average_monthly']['income']:,.2f} ‚ÇΩ
üí∏ –°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {trend_data['average_monthly']['expenses']:,.2f} ‚ÇΩ
üìà –°—Ä–µ–¥–Ω–∏–π —á–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥: {trend_data['average_monthly']['net_income']:,.2f} ‚ÇΩ
"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        if not filename:
            filename = f"summary_report_{start_date.strftime('%Y%m%d')}_{end_date.strftime('%Y%m%d')}.txt"
        
        filepath = self.output_dir / filename
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        return str(filepath)
    
    def generate_detailed_report(self, transactions: List[Transaction],
                               categories: List[Category],
                               start_date: date, end_date: date,
                               filename: Optional[str] = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        
        Args:
            transactions: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            categories: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
            filename: –ò–º—è —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        category_dict = {cat.id: cat for cat in categories}
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        statistics_calculator = StatisticsCalculator()
        statistics_calculator.add_transactions(transactions)
        summary = statistics_calculator._get_period_summary(start_date, end_date)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_analysis = statistics_calculator.get_category_analysis(start_date, end_date)
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report_content = f"""
–î–ï–¢–ê–õ–¨–ù–´–ô –§–ò–ù–ê–ù–°–û–í–´–ô –û–¢–ß–ï–¢
==========================

–ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}

–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
----------------
üí∞ –û–±—â–∏–µ –¥–æ—Ö–æ–¥—ã: {summary['total_income']:,.2f} ‚ÇΩ
üí∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {summary['total_expenses']:,.2f} ‚ÇΩ
üìà –ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥: {summary['net_income']:,.2f} ‚ÇΩ
üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {summary['transaction_count']}
üìà –°—Ä–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {summary['average_transaction']:,.2f} ‚ÇΩ

–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú
------------------------------
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category in category_analysis['categories']:
            category_id = category['category_id']
            category_name = category_dict.get(category_id, {}).name if category_id != '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' else '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
            
            report_content += f"""
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}
  üí∞ –î–æ—Ö–æ–¥—ã: {category['income']:,.2f} ‚ÇΩ
  üí∏ –†–∞—Å—Ö–æ–¥—ã: {category['expense']:,.2f} ‚ÇΩ
  üìà –ß–∏—Å—Ç—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {category['net']:,.2f} ‚ÇΩ
  üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {category['transaction_count']}
"""
        
        # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ç—Ä–∞—Ç
        spending_patterns = statistics_calculator.get_spending_patterns(30)
        if spending_patterns:
            report_content += f"""
–ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í –¢–†–ê–¢ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
-----------------------------------------

–ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:
"""
            for weekday, stats in spending_patterns['weekday_analysis'].items():
                report_content += f"  {weekday}: {stats['amount']:,.2f} ‚ÇΩ ({stats['count']} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, —Å—Ä–µ–¥–Ω–µ–µ: {stats['average']:,.2f} ‚ÇΩ)\n"
            
            report_content += "\n–ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è:\n"
            for time_period, stats in spending_patterns['time_analysis'].items():
                report_content += f"  {time_period}: {stats['amount']:,.2f} ‚ÇΩ ({stats['count']} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, —Å—Ä–µ–¥–Ω–µ–µ: {stats['average']:,.2f} ‚ÇΩ)\n"
            
            report_content += "\n–ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n"
            for range_name, stats in spending_patterns['amount_analysis'].items():
                report_content += f"  {range_name}: {stats['amount']:,.2f} ‚ÇΩ ({stats['count']} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, {stats['percentage']:.1f}% –æ—Ç –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤)\n"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        if not filename:
            filename = f"detailed_report_{start_date.strftime('%Y%m%d')}_{end_date.strftime('%Y%m%d')}.txt"
        
        filepath = self.output_dir / filename
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        return str(filepath)
    
    def generate_comprehensive_report(self, transactions: List[Transaction],
                                    categories: List[Category],
                                    budget_statuses: List[Dict[str, Any]],
                                    start_date: date, end_date: date) -> Dict[str, str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ –≤—Å–µ–º–∏ —Ç–∏–ø–∞–º–∏ –æ—Ç—á–µ—Ç–æ–≤ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        
        Args:
            transactions: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            categories: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            budget_statuses: –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –±—é–¥–∂–µ—Ç–æ–≤
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø—É—Ç—è–º–∏ –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        """
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç—á–µ—Ç–æ–≤
        files = {}
        
        # 1. CSV –æ—Ç—á–µ—Ç
        csv_file = self.generate_csv_report(
            transactions, start_date, end_date,
            f"transactions_{timestamp}.csv"
        )
        files['csv'] = csv_file
        
        # 2. –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        summary_file = self.generate_summary_report(
            transactions, start_date, end_date,
            f"summary_{timestamp}.txt"
        )
        files['summary'] = summary_file
        
        # 3. –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        detailed_file = self.generate_detailed_report(
            transactions, categories, start_date, end_date,
            f"detailed_{timestamp}.txt"
        )
        files['detailed'] = detailed_file
        
        # 4. –ì—Ä–∞—Ñ–∏–∫–∏
        try:
            # –ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞
            balance_chart = self.chart_generator.generate_balance_chart(
                transactions, start_date, end_date
            )
            files['balance_chart'] = balance_chart
            
            # –î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã
            income_expense_chart = self.chart_generator.generate_income_expense_chart(
                transactions, start_date, end_date
            )
            files['income_expense_chart'] = income_expense_chart
            
            # –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            category_pie_chart = self.chart_generator.generate_category_pie_chart(
                transactions, start_date, end_date
            )
            files['category_pie_chart'] = category_pie_chart
            
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
            trend_chart = self.chart_generator.generate_trend_analysis_chart(
                transactions, 12
            )
            files['trend_chart'] = trend_chart
            
            # –°—Ç–∞—Ç—É—Å –±—é–¥–∂–µ—Ç–æ–≤
            if budget_statuses:
                budget_chart = self.chart_generator.generate_budget_status_chart(
                    budget_statuses
                )
                files['budget_chart'] = budget_chart
            
            # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
            comprehensive_chart = self.chart_generator.generate_comprehensive_report(
                transactions, budget_statuses, start_date, end_date
            )
            files['comprehensive_chart'] = comprehensive_chart
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
        
        return files
    
    def generate_monthly_report(self, transactions: List[Transaction],
                              categories: List[Category],
                              year: int, month: int) -> Dict[str, str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç
        
        Args:
            transactions: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            categories: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            year: –ì–æ–¥
            month: –ú–µ—Å—è—Ü
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø—É—Ç—è–º–∏ –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        start_date = date(year, month, 1)
        if month == 12:
            end_date = date(year + 1, 1, 1) - timedelta(days=1)
        else:
            end_date = date(year, month + 1, 1) - timedelta(days=1)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç
        return self.generate_comprehensive_report(
            transactions, categories, [], start_date, end_date
        )
    
    def generate_yearly_report(self, transactions: List[Transaction],
                             categories: List[Category],
                             year: int) -> Dict[str, str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç
        
        Args:
            transactions: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            categories: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            year: –ì–æ–¥
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø—É—Ç—è–º–∏ –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        start_date = date(year, 1, 1)
        end_date = date(year, 12, 31)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç
        return self.generate_comprehensive_report(
            transactions, categories, [], start_date, end_date
        )
