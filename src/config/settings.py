"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import os
from pathlib import Path
from typing import Dict, Any
import yaml
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ë–∞–∑–æ–≤—ã–µ –ø—É—Ç–∏
BASE_DIR = Path(__file__).parent.parent.parent
DATA_DIR = BASE_DIR / "data"
CONFIG_DIR = BASE_DIR / "src" / "config"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
DATA_DIR.mkdir(exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_CONFIG = {
    "type": "sqlite",
    "path": str(DATA_DIR / "finance.db"),
    "echo": False,  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
APP_CONFIG = {
    "name": "AI Finance",
    "version": "0.1.0",
    "debug": os.getenv("DEBUG", "False").lower() == "true",
    "language": "ru",
    "currency": "RUB",
    "timezone": "Europe/Moscow",
    "date_format": "%d.%m.%Y",
    "datetime_format": "%d.%m.%Y %H:%M",
    "number_format": "ru_RU",
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
EXPORT_CONFIG = {
    "default_format": "csv",
    "csv_encoding": "utf-8",
    "pdf_font": "DejaVuSans",
    "pdf_font_size": 10,
    "excel_sheet_name": "–§–∏–Ω–∞–Ω—Å—ã",
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
REPORT_CONFIG = {
    "default_period": "month",
    "chart_style": "seaborn",
    "chart_size": (12, 8),
    "colors": {
        "income": "#2ecc71",
        "expense": "#e74c3c",
        "balance": "#3498db",
        "budget": "#f39c12",
    }
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATION_CONFIG = {
    "enabled": True,
    "budget_alerts": True,
    "budget_threshold": 0.8,  # 80% –æ—Ç –±—é–¥–∂–µ—Ç–∞
    "low_balance_alerts": True,
    "low_balance_threshold": 1000,  # —Ä—É–±–ª–µ–π
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
BACKUP_CONFIG = {
    "enabled": True,
    "auto_backup": True,
    "backup_interval": "daily",
    "max_backups": 30,
    "backup_dir": str(DATA_DIR / "backups"),
}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_CATEGORIES = [
    # –î–æ—Ö–æ–¥—ã
    {"name": "–ó–∞—Ä–ø–ª–∞—Ç–∞", "type": "income", "icon": "üí∞", "color": "#2ecc71"},
    {"name": "–§—Ä–∏–ª–∞–Ω—Å", "type": "income", "icon": "üíª", "color": "#2ecc71"},
    {"name": "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "type": "income", "icon": "üìà", "color": "#2ecc71"},
    {"name": "–ü–æ–¥–∞—Ä–∫–∏", "type": "income", "icon": "üéÅ", "color": "#2ecc71"},
    
    # –†–∞—Å—Ö–æ–¥—ã
    {"name": "–ü—Ä–æ–¥—É–∫—Ç—ã", "type": "expense", "icon": "üõí", "color": "#e74c3c"},
    {"name": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "type": "expense", "icon": "üöó", "color": "#e74c3c"},
    {"name": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "type": "expense", "icon": "üé¨", "color": "#e74c3c"},
    {"name": "–ó–¥–æ—Ä–æ–≤—å–µ", "type": "expense", "icon": "üè•", "color": "#e74c3c"},
    {"name": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "type": "expense", "icon": "üìö", "color": "#e74c3c"},
    {"name": "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ", "type": "expense", "icon": "üè†", "color": "#e74c3c"},
    {"name": "–û–¥–µ–∂–¥–∞", "type": "expense", "icon": "üëï", "color": "#e74c3c"},
    {"name": "–ü—Ä–æ—á–µ–µ", "type": "expense", "icon": "üì¶", "color": "#e74c3c"},
]

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
USER_CONFIG_FILE = CONFIG_DIR / "user_config.yaml"
if USER_CONFIG_FILE.exists():
    with open(USER_CONFIG_FILE, 'r', encoding='utf-8') as f:
        USER_CONFIG = yaml.safe_load(f)
else:
    USER_CONFIG = {}


def get_setting(key: str, default: Any = None) -> Any:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ –∫–ª—é—á—É"""
    keys = key.split('.')
    value = USER_CONFIG
    
    for k in keys:
        if isinstance(value, dict) and k in value:
            value = value[k]
        else:
            return default
    
    return value


def update_setting(key: str, value: Any) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
    keys = key.split('.')
    config = USER_CONFIG
    
    for k in keys[:-1]:
        if k not in config:
            config[k] = {}
        config = config[k]
    
    config[keys[-1]] = value
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open(USER_CONFIG_FILE, 'w', encoding='utf-8') as f:
        yaml.dump(USER_CONFIG, f, default_flow_style=False, allow_unicode=True)


def get_database_url() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if DATABASE_CONFIG["type"] == "sqlite":
        return f"sqlite:///{DATABASE_CONFIG['path']}"
    elif DATABASE_CONFIG["type"] == "postgresql":
        return f"postgresql://{DATABASE_CONFIG['user']}:{DATABASE_CONFIG['password']}@{DATABASE_CONFIG['host']}:{DATABASE_CONFIG['port']}/{DATABASE_CONFIG['database']}"
    else:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {DATABASE_CONFIG['type']}")


class Settings:
    """–ö–ª–∞—Å—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.database_path = DATABASE_CONFIG["path"]
        self.debug = APP_CONFIG["debug"]
        self.language = APP_CONFIG["language"]
        self.currency = APP_CONFIG["currency"]
        self.timezone = APP_CONFIG["timezone"]


def get_settings() -> Settings:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    return Settings()
