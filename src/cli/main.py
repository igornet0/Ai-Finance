"""
–ì–ª–∞–≤–Ω—ã–π CLI –º–æ–¥—É–ª—å –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
"""

import click
import os
from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich.table import Table
from rich import box
from datetime import datetime, date, timedelta
from decimal import Decimal

from ..data.database.initializer import DatabaseInitializer
from ..services import TransactionService, CategoryService, BudgetService, UserService
from ..core.models.transaction import Transaction, TransactionType
from ..core.models.category import Category, CategoryType
from ..core.models.budget import Budget, BudgetPeriod
from ..core.calculators import BalanceCalculator, StatisticsCalculator
from ..analytics import ChartGenerator, ReportGenerator

console = Console()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
_services = {}


def get_services():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"""
    global _services
    if not _services:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–µ—Ä–≤–∏—Å—ã
        db_initializer = DatabaseInitializer()
        db_initializer.initialize_database()
        
        _services = {
            'db_initializer': db_initializer,
            'transaction_service': db_initializer.transaction_service,
            'category_service': db_initializer.category_service,
            'budget_service': db_initializer.budget_service,
            'user_service': db_initializer.user_service
        }
    return _services


@click.group()
@click.version_option(version="0.1.0", prog_name="AI Finance")
def main():
    """
    üè¶ AI Finance - –õ–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    
    –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –º–æ—â–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
    """
    # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    title = Text("üè¶ AI Finance", style="bold blue")
    subtitle = Text("–õ–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", style="italic")
    
    panel = Panel.fit(
        f"{title}\n{subtitle}",
        border_style="blue",
        padding=(1, 2)
    )
    console.print(panel)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    get_services()


@main.command()
@click.option('--amount', '-a', type=float, required=True, help='–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
@click.option('--category', '-c', type=str, required=True, help='–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
@click.option('--description', '-d', type=str, help='–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
@click.option('--type', '-t', type=click.Choice(['income', 'expense']), required=True, help='–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
@click.option('--date', type=str, help='–î–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (YYYY-MM-DD), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è')
def add_transaction(amount, category, description, type, date):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"""
    services = get_services()
    transaction_service = services['transaction_service']
    category_service = services['category_service']
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏
        categories = category_service.search_categories(category)
        if not categories:
            console.print(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        category_obj = categories[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        if date:
            transaction_date = datetime.fromisoformat(date)
        else:
            transaction_date = datetime.now()
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = Transaction(
            amount=Decimal(str(amount)),
            transaction_type=TransactionType(type),
            category_id=category_obj.id,
            description=description or '',
            date=transaction_date
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        created_transaction = transaction_service.create_transaction(transaction)
        
        console.print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {type} {amount} —Ä—É–±. –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_obj.name}'")
        console.print(f"   ID: {created_transaction.id}")
        if description:
            console.print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        console.print(f"   –î–∞—Ç–∞: {transaction_date.strftime('%d.%m.%Y %H:%M')}")
        
    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")


@main.command()
@click.option('--period', '-p', type=click.Choice(['day', 'week', 'month', 'year']), 
              default='month', help='–ü–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞')
@click.option('--year', type=int, help='–ì–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞')
@click.option('--month', type=int, help='–ú–µ—Å—è—Ü –¥–ª—è –æ—Ç—á–µ—Ç–∞ (1-12)')
def report(period, year, month):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
    services = get_services()
    transaction_service = services['transaction_service']
    statistics_calculator = StatisticsCalculator()
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        today = date.today()
        if period == 'day':
            start_date = end_date = today
        elif period == 'week':
            start_date = today.replace(day=today.day - today.weekday())
            end_date = start_date.replace(day=start_date.day + 6)
        elif period == 'month':
            if year and month:
                start_date = date(year, month, 1)
                if month == 12:
                    end_date = date(year + 1, 1, 1) - timedelta(days=1)
                else:
                    end_date = date(year, month + 1, 1) - timedelta(days=1)
            else:
                start_date = today.replace(day=1)
                if today.month == 12:
                    end_date = today.replace(year=today.year + 1, month=1, day=1) - timedelta(days=1)
                else:
                    end_date = today.replace(month=today.month + 1, day=1) - timedelta(days=1)
        elif period == 'year':
            if year:
                start_date = date(year, 1, 1)
                end_date = date(year, 12, 31)
            else:
                start_date = today.replace(month=1, day=1)
                end_date = today.replace(month=12, day=31)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
        transactions = transaction_service.get_transactions(start_date=start_date, end_date=end_date)
        statistics_calculator.add_transactions(transactions)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        summary = statistics_calculator._get_period_summary(start_date, end_date)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –æ—Ç—á–µ—Ç–∞
        table = Table(title=f"üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ {period}", box=box.ROUNDED)
        table.add_column("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", style="cyan", no_wrap=True)
        table.add_column("–°—É–º–º–∞", style="green", justify="right")
        table.add_column("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", style="yellow", justify="right")
        
        table.add_row("üí∞ –î–æ—Ö–æ–¥—ã", f"{summary['total_income']:,.2f} ‚ÇΩ", "")
        table.add_row("üí∏ –†–∞—Å—Ö–æ–¥—ã", f"{summary['total_expenses']:,.2f} ‚ÇΩ", "")
        table.add_row("üìà –ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥", f"{summary['net_income']:,.2f} ‚ÇΩ", "")
        table.add_row("üìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", "", str(summary['transaction_count']))
        table.add_row("üìä –°—Ä–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è", f"{summary['average_transaction']:,.2f} ‚ÇΩ", "")
        
        console.print(table)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥
        console.print(f"\nüìÖ –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}")
        
    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")


@main.command()
def balance():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å"""
    services = get_services()
    transaction_service = services['transaction_service']
    balance_calculator = BalanceCalculator()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transactions = transaction_service.get_transactions()
        balance_calculator.add_transactions(transactions)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        current_balance = balance_calculator.calculate_balance()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        today = date.today()
        month_start = today.replace(day=1)
        month_income = balance_calculator.calculate_income(month_start, today)
        month_expenses = balance_calculator.calculate_expenses(month_start, today)
        month_net = balance_calculator.calculate_net_income(month_start, today)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –±–∞–ª–∞–Ω—Å–∞
        table = Table(title="üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å", box=box.ROUNDED)
        table.add_column("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", style="cyan", no_wrap=True)
        table.add_column("–°—É–º–º–∞", style="green", justify="right")
        
        table.add_row("üí≥ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å", f"{current_balance:,.2f} ‚ÇΩ")
        table.add_row("", "")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        table.add_row("üìÖ –ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:", "")
        table.add_row("  üí∞ –î–æ—Ö–æ–¥—ã", f"{month_income:,.2f} ‚ÇΩ")
        table.add_row("  üí∏ –†–∞—Å—Ö–æ–¥—ã", f"{month_expenses:,.2f} ‚ÇΩ")
        table.add_row("  üìà –ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥", f"{month_net:,.2f} ‚ÇΩ")
        
        console.print(table)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É
        console.print(f"\nüìÖ –î–∞—Ç–∞: {today.strftime('%d.%m.%Y')}")
        
    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –±–∞–ª–∞–Ω—Å–∞: {e}")


@main.command()
def budget():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±—é–¥–∂–µ—Ç–æ–≤"""
    services = get_services()
    budget_service = services['budget_service']
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—é–¥–∂–µ—Ç–æ–≤
        budgets_status = budget_service.get_all_budgets_status()
        
        if not budgets_status:
            console.print("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—é–¥–∂–µ—Ç–æ–≤")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –±—é–¥–∂–µ—Ç–æ–≤
        table = Table(title="üìã –°—Ç–∞—Ç—É—Å –±—é–¥–∂–µ—Ç–æ–≤", box=box.ROUNDED)
        table.add_column("–ë—é–¥–∂–µ—Ç", style="cyan", no_wrap=True)
        table.add_column("–õ–∏–º–∏—Ç", style="green", justify="right")
        table.add_column("–ü–æ—Ç—Ä–∞—á–µ–Ω–æ", style="yellow", justify="right")
        table.add_column("–û—Å—Ç–∞—Ç–æ–∫", style="blue", justify="right")
        table.add_column("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", style="magenta", justify="right")
        table.add_column("–°—Ç–∞—Ç—É—Å", style="red", justify="center")
        
        for budget_status in budgets_status:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if budget_status['is_over_budget']:
                status_icon = "üî¥"
            elif budget_status['is_near_limit']:
                status_icon = "üü°"
            else:
                status_icon = "üü¢"
            
            table.add_row(
                budget_status['budget_name'],
                f"{budget_status['budget_amount']:,.2f} ‚ÇΩ",
                f"{budget_status['spent_amount']:,.2f} ‚ÇΩ",
                f"{budget_status['remaining_amount']:,.2f} ‚ÇΩ",
                f"{budget_status['usage_percentage']:.1f}%",
                status_icon
            )
        
        console.print(table)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        alerts = budget_service.get_budget_alerts()
        if alerts:
            console.print("\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            for alert in alerts:
                console.print(f"  ‚Ä¢ {alert['message']}")
        
    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±—é–¥–∂–µ—Ç–æ–≤: {e}")


@main.command()
def categories():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    services = get_services()
    category_service = services['category_service']
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = category_service.get_categories()
        
        if not categories:
            console.print("üìÅ –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        table = Table(title="üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", box=box.ROUNDED)
        table.add_column("ID", style="cyan", justify="right")
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="green")
        table.add_column("–¢–∏–ø", style="yellow")
        table.add_column("–ò–∫–æ–Ω–∫–∞", style="blue", justify="center")
        table.add_column("–ê–∫—Ç–∏–≤–Ω–∞", style="magenta", justify="center")
        
        for category in categories:
            type_icon = "üí∞" if category.is_income_category else "üí∏"
            active_icon = "‚úÖ" if category.is_active else "‚ùå"
            
            table.add_row(
                str(category.id),
                category.name,
                type_icon,
                category.icon,
                active_icon
            )
        
        console.print(table)
        
    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")


@main.command()
@click.option('--limit', '-l', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π')
def transactions(limit):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    services = get_services()
    transaction_service = services['transaction_service']
    category_service = services['category_service']
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transactions = transaction_service.get_transactions(limit=limit)
        
        if not transactions:
            console.print("üí≥ –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        table = Table(title=f"üí≥ –ü–æ—Å–ª–µ–¥–Ω–∏–µ {limit} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", box=box.ROUNDED)
        table.add_column("ID", style="cyan", justify="right")
        table.add_column("–î–∞—Ç–∞", style="blue")
        table.add_column("–¢–∏–ø", style="yellow", justify="center")
        table.add_column("–°—É–º–º–∞", style="green", justify="right")
        table.add_column("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", style="magenta")
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
        
        for transaction in transactions:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category_name = "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            if transaction.category_id:
                category = category_service.get_category(transaction.category_id)
                if category:
                    category_name = category.name
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Ç–∏–ø–∞
            type_icon = "üí∞" if transaction.is_income else "üí∏"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É
            amount_str = f"{transaction.amount:,.2f} ‚ÇΩ"
            if transaction.is_expense:
                amount_str = f"-{amount_str}"
            
            table.add_row(
                str(transaction.id),
                transaction.date.strftime('%d.%m.%Y'),
                type_icon,
                amount_str,
                category_name,
                transaction.description[:30] + "..." if len(transaction.description) > 30 else transaction.description
            )
        
        console.print(table)
        
    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")


@main.command()
@click.option('--start-date', type=str, help='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
@click.option('--end-date', type=str, help='–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
@click.option('--output-dir', type=str, default='reports', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤')
def generate_report(start_date, end_date, output_dir):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
    services = get_services()
    transaction_service = services['transaction_service']
    category_service = services['category_service']
    budget_service = services['budget_service']
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        if start_date and end_date:
            start = datetime.fromisoformat(start_date).date()
            end = datetime.fromisoformat(end_date).date()
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            today = date.today()
            start = today.replace(day=1)
            if today.month == 12:
                end = today.replace(year=today.year + 1, month=1, day=1) - timedelta(days=1)
            else:
                end = today.replace(month=today.month + 1, day=1) - timedelta(days=1)
        
        console.print(f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {start.strftime('%d.%m.%Y')} - {end.strftime('%d.%m.%Y')}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        transactions = transaction_service.get_transactions(start_date=start, end_date=end)
        categories = category_service.get_categories()
        budget_statuses = budget_service.get_all_budgets_status()
        
        if not transactions:
            console.print("‚ùå –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤
        report_generator = ReportGenerator(output_dir)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç
        files = report_generator.generate_comprehensive_report(
            transactions, categories, budget_statuses, start, end
        )
        
        console.print("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        console.print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        table = Table(title="üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", box=box.ROUNDED)
        table.add_column("–¢–∏–ø", style="cyan")
        table.add_column("–§–∞–π–ª", style="green")
        
        for file_type, file_path in files.items():
            filename = os.path.basename(file_path)
            table.add_row(file_type, filename)
        
        console.print(table)
        
    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")


@main.command()
@click.option('--year', type=int, help='–ì–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞')
@click.option('--month', type=int, help='–ú–µ—Å—è—Ü –¥–ª—è –æ—Ç—á–µ—Ç–∞ (1-12)')
@click.option('--output-dir', type=str, default='reports', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤')
def monthly_report(year, month, output_dir):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç"""
    services = get_services()
    transaction_service = services['transaction_service']
    category_service = services['category_service']
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ–¥ –∏ –º–µ—Å—è—Ü
        if not year or not month:
            today = date.today()
            year = year or today.year
            month = month or today.month
        
        console.print(f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {month:02d}.{year}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        transactions = transaction_service.get_transactions()
        categories = category_service.get_categories()
        
        if not transactions:
            console.print("‚ùå –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤
        report_generator = ReportGenerator(output_dir)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç
        files = report_generator.generate_monthly_report(
            transactions, categories, year, month
        )
        
        console.print("‚úÖ –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        console.print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        table = Table(title="üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", box=box.ROUNDED)
        table.add_column("–¢–∏–ø", style="cyan")
        table.add_column("–§–∞–π–ª", style="green")
        
        for file_type, file_path in files.items():
            filename = os.path.basename(file_path)
            table.add_row(file_type, filename)
        
        console.print(table)
        
    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")


@main.command()
@click.option('--chart-type', type=click.Choice(['balance', 'income-expense', 'category-pie', 'trends', 'budget']), 
              required=True, help='–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞')
@click.option('--start-date', type=str, help='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
@click.option('--end-date', type=str, help='–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
@click.option('--output-dir', type=str, default='charts', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤')
def generate_chart(chart_type, start_date, end_date, output_dir):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫"""
    services = get_services()
    transaction_service = services['transaction_service']
    budget_service = services['budget_service']
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        if start_date and end_date:
            start = datetime.fromisoformat(start_date).date()
            end = datetime.fromisoformat(end_date).date()
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            end = date.today()
            start = end - timedelta(days=30)
        
        console.print(f"üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {chart_type}")
        console.print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start.strftime('%d.%m.%Y')} - {end.strftime('%d.%m.%Y')}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        transactions = transaction_service.get_transactions(start_date=start, end_date=end)
        
        if not transactions:
            console.print("‚ùå –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤
        chart_generator = ChartGenerator(output_dir)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if chart_type == 'balance':
            file_path = chart_generator.generate_balance_chart(transactions, start, end)
        elif chart_type == 'income-expense':
            file_path = chart_generator.generate_income_expense_chart(transactions, start, end)
        elif chart_type == 'category-pie':
            file_path = chart_generator.generate_category_pie_chart(transactions, start, end)
        elif chart_type == 'trends':
            file_path = chart_generator.generate_trend_analysis_chart(transactions)
        elif chart_type == 'budget':
            budget_statuses = budget_service.get_all_budgets_status()
            if not budget_statuses:
                console.print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—é–¥–∂–µ—Ç–æ–≤")
                return
            file_path = chart_generator.generate_budget_status_chart(budget_statuses)
        
        console.print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {os.path.basename(file_path)}")
        console.print(f"üìÅ –ü—É—Ç—å: {file_path}")
        
    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")


@main.command()
def gui():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    try:
        from ..ui.main_window import MainWindow
        
        console.print("üñ•Ô∏è  –ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        app = MainWindow()
        app.run()
        
    except ImportError as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ GUI –º–æ–¥—É–ª–µ–π: {e}")
        console.print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è GUI")
    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ GUI: {e}")


if __name__ == "__main__":
    main()
