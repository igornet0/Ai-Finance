#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ AI Finance
"""

import sys
import os
from datetime import datetime, date
from decimal import Decimal

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.data.database.initializer import DatabaseInitializer
from src.core.models.transaction import Transaction, TransactionType
from src.core.models.category import Category, CategoryType
from src.core.models.budget import Budget, BudgetPeriod
from src.core.calculators import BalanceCalculator, StatisticsCalculator


def test_basic_functionality():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ AI Finance...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        db_initializer = DatabaseInitializer()
        db_initializer.initialize_database()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        transaction_service = db_initializer.transaction_service
        category_service = db_initializer.category_service
        budget_service = db_initializer.budget_service
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        print("üìÅ –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
        categories = category_service.get_categories()
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        # –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        print("üí≥ –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
        income_category = next((cat for cat in categories if cat.name == "–ó–∞—Ä–ø–ª–∞—Ç–∞"), None)
        if income_category:
            transaction = Transaction(
                amount=Decimal('100000.00'),
                transaction_type=TransactionType.INCOME,
                category_id=income_category.id,
                description="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞",
                date=datetime.now()
            )
            created_transaction = transaction_service.create_transaction(transaction)
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ID: {created_transaction.id}")
        
        # –¢–µ—Å—Ç 3: –†–∞—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞
        print("üí∞ –¢–µ—Å—Ç 3: –†–∞—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞...")
        balance_calculator = BalanceCalculator()
        transactions = transaction_service.get_transactions()
        balance_calculator.add_transactions(transactions)
        balance = balance_calculator.calculate_balance()
        print(f"   ‚úÖ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:,.2f} ‚ÇΩ")
        
        # –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("üìä –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...")
        statistics_calculator = StatisticsCalculator()
        statistics_calculator.add_transactions(transactions)
        today = date.today()
        month_start = today.replace(day=1)
        summary = statistics_calculator._get_period_summary(month_start, today)
        print(f"   ‚úÖ –î–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü: {summary['total_income']:,.2f} ‚ÇΩ")
        print(f"   ‚úÖ –†–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü: {summary['total_expenses']:,.2f} ‚ÇΩ")
        print(f"   ‚úÖ –ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥: {summary['net_income']:,.2f} ‚ÇΩ")
        
        # –¢–µ—Å—Ç 5: –ë—é–¥–∂–µ—Ç—ã
        print("üìã –¢–µ—Å—Ç 5: –ë—é–¥–∂–µ—Ç—ã...")
        budgets_status = budget_service.get_all_budgets_status()
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(budgets_status)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—é–¥–∂–µ—Ç–æ–≤")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = test_basic_functionality()
    sys.exit(0 if success else 1)
